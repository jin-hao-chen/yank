#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os
import sys
from tokentype import *
from parser import (Token, Parser)
from objects import (call, call_by_value, type_to_pystr, is_type, args_num, vm)
from objects import (ObjHeader, ClsObj, NilObj, BoolObj, StrObj, IntObj, \
        FloatObj, ListObj, MapObj, ModuleObj, FunObj, Value)
from objects import (Thread, Frame)
from compiler import CompileUnit, Loop


def run_file(argv=None):
    if len(argv) > 1:
        filename = argv[1]
        parser = Parser(filename)
        while True:
            parser.fetch_next_token()
            if parser.cur_token.type == TOKEN_TYPE_EOF:
                print(parser.cur_token)
                return
            print(parser.cur_token)

def test_object():
    thread = Thread() 
    frame = thread.alloc_frame()
    person = MapObj()
    key = StrObj('name')
    val = StrObj('jh')
    frame[0].to_value(person)
    frame[1].to_value(key)
    frame[2].to_value(val)
    call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame)
    frame[1].clear_value()
    frame[2].clear_value()
    frame[1].to_value(key)
    person_str = call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(person_str.str)

    frame[1].clear_value()
    key = StrObj('age')
    li = ListObj()
    frame[1].to_value(li)
    frame[2].to_value(IntObj(90))
    call_by_value(frame[1], 'append(_,_)')(frame.start + 1, frame)
    frame[2].clear_value()
    frame[2].to_value(IntObj(0))
    frame[3].to_value(FloatObj(89.5))
    call_by_value(frame[1], 'insert(_,_,_)')(frame.start + 1, frame)
    frame[2].clear_value()
    frame[1].clear_value()
    frame[1].to_value(key)
    frame[2].to_value(li)
    call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame)
    frame[1].clear_value()
    frame[2].clear_value()
    s = call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(s.str)
    frame[1].clear_value()
    frame[2].clear_value()
    frame[3].clear_value()
    frame[1].to_value(StrObj('age'))
    frame[2].to_value(IntObj(10))
    call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame)
    frame[1].clear_value()
    frame[2].clear_value()
    s = call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(s.str)
    
    frame[1].to_value(FloatObj(100))
    frame[2].to_value(FloatObj(8.4))
    ret = call_by_value(frame[1], '/(_,_)')(frame.start + 1, frame)
    frame[1].clear_value()
    frame[2].clear_value()
    frame[1].to_value(ret)
    ret = call_by_value(frame[1], 'int(_)')(frame.start + 1, frame)
    frame[1].to_value(ret)
    s = call_by_value(frame[1], 'tostr(_)')(frame.start + 1, frame)
    print(s.str)
    frame[1].clear_value() 
    frame[0].clear_value()
    frame[0].to_value(StrObj('123.12312'))
    ret = call_by_value(frame[0], 'numbers(_)')(frame.start, frame)
    frame[1].to_value(ret)
    s = call_by_value(frame[1], 'tostr(_)')(frame.start + 1, frame)
    print(s.str)

    frame[0].to_value(BoolObj(True))
    ret = call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(ret.str)


def main(argv=None):
    test_object()

if __name__ == '__main__':
    argv = sys.argv
    main(argv)

