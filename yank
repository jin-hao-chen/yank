#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os
import sys
from tokentype import *
from parser import (Token, Parser)
from objects import (call, call_by_value, type_to_pystr, is_type, args_num, vm)
from objects import (ObjHeader, ClsObj, NilObj, BoolObj, StrObj, IntObj, \
        FloatObj, ListObj, MapObj, ModuleObj, FunObj, Value)
from objects import (Thread, Frame)
from compiler import CompileUnit, Loop


def run_file(argv=None):
    if len(argv) > 1:
        filename = argv[1]
        parser = Parser(filename)
        while True:
            parser.fetch_next_token()
            if parser.cur_token.type == TOKEN_TYPE_EOF:
                print(parser.cur_token)
                return
            print(parser.cur_token)

def test_object():
    thread = Thread() 
    frame = thread.alloc_frame()
    person = MapObj()
    key = StrObj('name')
    val = StrObj('jh')
    frame[0].to_value(person)
    frame[1].to_value(key)
    frame[2].to_value(val)
    call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame)
    frame[1].clear_value()
    frame[2].clear_value()
    frame[1].to_value(key)
    person_str = call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(person_str.str)

    frame[1].clear_value()
    key = StrObj('age')
    li = ListObj()
    frame[1].to_value(li)
    frame[2].to_value(IntObj(90))
    call_by_value(frame[1], 'append(_,_)')(frame.start + 1, frame)
    frame[2].clear_value()
    frame[2].to_value(IntObj(0))
    frame[3].to_value(FloatObj(89.5))
    call_by_value(frame[1], 'insert(_,_,_)')(frame.start + 1, frame)
    frame[2].clear_value()
    frame[1].clear_value()
    frame[1].to_value(key)
    frame[2].to_value(li)
    call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame)
    frame[1].clear_value()
    frame[2].clear_value()
    s = call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(s.str)
    """
    person = MapObj({Value.new_value(StrObj('name')): Value.new_value(StrObj('JH')), Value.new_value(StrObj('age')): Value.new_value(IntObj(19))})
    stack[0].to_value(person)
    person_str = call_by_value(stack[0], 'tostr(_)')(0, stack)
    print(person_str.str)
    mymodule = Value.to_value(ModuleObj('mymodule'))
    mymodule_str = call_by_value(mymodule, 'tostr(_)')(mymodule)
    print(mymodule_str.str)

    myfun = FunObj('myfun')
    myfun_str = call(myfun, 'tostr(_)')(myfun)
    print(myfun_str.str)
    li = ListObj([Value.new_value(IntObj(90)), Value.new_value(IntObj(89))])
    score = StrObj('score')
    stack[1].to_value(score)
    stack[2].to_value(li)
    call(stack[0], '@put(_,_,_)')(0, stack)
    person_str = call_by_value(stack[0], 'tostr(_)')(0, stack)
    print(person_str.str)
    """


def main(argv=None):
    test_object()

if __name__ == '__main__':
    argv = sys.argv
    main(argv)

