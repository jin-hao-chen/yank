#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os
import sys
from pprint import pprint
from tokentype import *
from parser import (Token, Parser)
from objects import (call, call_by_value, exit_if_false, type_to_pystr, is_type, args_num)
from objects import (ObjHeader, ClsObj, NilObj, BoolObj, StrObj, IntObj, \
                        FloatObj, ListObj, MapObj, ModuleObj, FunObj, Value)
from objects import (Thread, Frame)
from compiler import (CompileUnit, Loop)
from opcode import opcode_print
from vm import VM


def run_file(argv=None):
    if len(argv) > 1:
        filename = argv[1]
        parser = Parser(filename)
        while True:
            parser.fetch_next_token()
            if parser.cur_token.type == TOKEN_TYPE_EOF:
                print(parser.cur_token)
                return
            print(parser.cur_token)

def test_object_api():
    thread = Thread() 
    frame = thread.alloc_frame()
    person = MapObj()
    frame[0].to_value(person)
    frame[1].to_value(StrObj('Name'))
    frame[2].to_value(StrObj('JH'))
    print(call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame))
    frame[0].to_value(person)
    print(call_by_value(frame[0], 'tostr(_)')(frame.start, frame))
    print(frame[0].obj().str)
    
    scores = ListObj()
    for i in range(3):
        frame[0].to_value(scores)
        frame[1].to_value(IntObj(0))
        frame[2].to_value(FloatObj(90.0 + i))
        exit_if_false(call_by_value(frame[0], 'insert(_,_,_)')(frame.start, frame))
    frame[0].to_value(person)
    frame[1].to_value(StrObj('Scores'))
    frame[2].to_value(scores)
    call_by_value(frame[0], '@put(_,_,_)')(frame.start, frame)
    frame[0].to_value(person)
    call_by_value(frame[0], 'tostr(_)')(frame.start, frame)
    print(frame[0].obj().str) 

    fun = FunObj('test')
    print(call(fun, '_tostr(_)')(fun).str)


def test_compiler():
    vm = VM()
    parser = Parser('./example.y')
    cu = CompileUnit(parser)
    cu.emit_load_constant('1')
    opcode_print(cu.fun.stream)
    pprint(vm.method_names)
    

def main(argv=None):
    test_compiler()

if __name__ == '__main__':
    argv = sys.argv
    main(argv)

